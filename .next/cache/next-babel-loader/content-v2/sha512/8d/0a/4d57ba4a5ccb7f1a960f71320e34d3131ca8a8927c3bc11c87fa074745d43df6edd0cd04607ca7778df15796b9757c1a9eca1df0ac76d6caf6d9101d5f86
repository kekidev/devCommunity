{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport firebase from \"../firebase/firebase\";\nexport const addUser = async authUser => {\n  const resp = await firebase.firestore().collection(\"users\").doc(authUser.uid).set(_objectSpread({}, authUser), {\n    merge: true\n  });\n  return resp;\n};\nexport const getPost = async id => {\n  const snapshot = await firebase.firestore().collection(\"articles\").doc(String(id)).get();\n  const data = snapshot.exists ? JSON.stringify(snapshot.data()) : null;\n  return data;\n};\nexport const getAllPosts = async () => {\n  const snapshot = await firebase.firestore().collection(\"articles\").get();\n  const post = snapshot.docs.map(doc => _objectSpread({\n    id: doc.id\n  }, doc.data()));\n  return post;\n};","map":{"version":3,"sources":["/Users/keki/dev/websites/web/src/utils/db.ts"],"names":["firebase","addUser","authUser","resp","firestore","collection","doc","uid","set","merge","getPost","id","snapshot","String","get","data","exists","JSON","stringify","getAllPosts","post","docs","map"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,sBAArB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAOC,QAAP,IAAyB;AAC9C,QAAMC,IAAI,GAAG,MAAMH,QAAQ,CACxBI,SADgB,GAEhBC,UAFgB,CAEL,OAFK,EAGhBC,GAHgB,CAGZJ,QAAQ,CAACK,GAHG,EAIhBC,GAJgB,mBAIPN,QAJO,GAIK;AAAEO,IAAAA,KAAK,EAAE;AAAT,GAJL,CAAnB;AAKA,SAAON,IAAP;AACD,CAPM;AASP,OAAO,MAAMO,OAAO,GAAG,MAAOC,EAAP,IAAc;AACnC,QAAMC,QAAQ,GAAG,MAAMZ,QAAQ,CAC5BI,SADoB,GAEpBC,UAFoB,CAET,UAFS,EAGpBC,GAHoB,CAGhBO,MAAM,CAACF,EAAD,CAHU,EAIpBG,GAJoB,EAAvB;AAMA,QAAMC,IAAI,GAAGH,QAAQ,CAACI,MAAT,GAAkBC,IAAI,CAACC,SAAL,CAAeN,QAAQ,CAACG,IAAT,EAAf,CAAlB,GAAoD,IAAjE;AACA,SAAOA,IAAP;AACD,CATM;AAWP,OAAO,MAAMI,WAAW,GAAG,YAAY;AACrC,QAAMP,QAAQ,GAAG,MAAMZ,QAAQ,CAACI,SAAT,GAAqBC,UAArB,CAAgC,UAAhC,EAA4CS,GAA5C,EAAvB;AACA,QAAMM,IAAI,GAAGR,QAAQ,CAACS,IAAT,CAAcC,GAAd,CAAmBhB,GAAD;AAAYK,IAAAA,EAAE,EAAEL,GAAG,CAACK;AAApB,KAA2BL,GAAG,CAACS,IAAJ,EAA3B,CAAlB,CAAb;AACA,SAAOK,IAAP;AACD,CAJM","sourcesContent":["import firebase from \"../firebase/firebase\";\n\nexport const addUser = async (authUser: any) => {\n  const resp = await firebase\n    .firestore()\n    .collection(\"users\")\n    .doc(authUser.uid as string)\n    .set({ ...authUser }, { merge: true });\n  return resp;\n};\n\nexport const getPost = async (id) => {\n  const snapshot = await firebase\n    .firestore()\n    .collection(\"articles\")\n    .doc(String(id))\n    .get();\n\n  const data = snapshot.exists ? JSON.stringify(snapshot.data()) : null;\n  return data;\n};\n\nexport const getAllPosts = async () => {\n  const snapshot = await firebase.firestore().collection(\"articles\").get();\n  const post = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n  return post;\n};\n"]},"metadata":{},"sourceType":"module"}