{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/keki/dev/websites/web/lib/auth.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { addUser } from \"../utils/db\";\nimport firebase from \"../firebase/firebase\";\nconst authContext = /*#__PURE__*/createContext({\n  auth: null,\n  loading: true,\n  siginWithGoogle: async () => {},\n  signOut: async () => {}\n});\n\nconst formatAuthState = user => ({\n  uid: user.uid,\n  email: user.email,\n  name: user.displayName,\n  photoUrl: user.photoURL,\n  token: null\n});\n\nfunction useProvideAuth() {\n  const {\n    0: auth,\n    1: setAuth\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n\n  const handleAuthChange = async authState => {\n    if (!authState) {\n      setLoading(false);\n      return;\n    }\n\n    const formattedAuth = formatAuthState(authState);\n    formattedAuth.token = await authState.getIdToken();\n    setAuth(formattedAuth);\n    setLoading(false);\n  };\n\n  const signedIn = async (response, provider = \"google\") => {\n    if (!response.user) {\n      throw new Error(\"No User\");\n    }\n\n    const authUser = formatAuthState(response.user);\n    await addUser(_objectSpread(_objectSpread({}, authUser), {}, {\n      provider\n    }));\n  };\n\n  const clear = () => {\n    setAuth(null);\n    setLoading(true);\n  };\n\n  const siginWithGoogle = async () => {\n    setLoading(true);\n    return firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider()).then(signedIn);\n  };\n\n  const signOut = async () => {\n    return firebase.auth().signOut().then(clear);\n  };\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(handleAuthChange);\n    return () => unsubscribe();\n  }, []);\n  return {\n    auth,\n    loading,\n    siginWithGoogle,\n    signOut\n  };\n}\n\nexport function AuthProvider({\n  children\n}) {\n  const auth = useProvideAuth();\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n}\nexport const useAuth = () => useContext(authContext);","map":{"version":3,"sources":["/Users/keki/dev/websites/web/lib/auth.tsx"],"names":["createContext","useContext","useEffect","useState","addUser","firebase","authContext","auth","loading","siginWithGoogle","signOut","formatAuthState","user","uid","email","name","displayName","photoUrl","photoURL","token","useProvideAuth","setAuth","setLoading","handleAuthChange","authState","formattedAuth","getIdToken","signedIn","response","provider","Error","authUser","clear","signInWithPopup","GoogleAuthProvider","then","unsubscribe","onAuthStateChanged","AuthProvider","children","useAuth"],"mappings":"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","sourcesContent":["import { Context, createContext, useContext, useEffect, useState } from \"react\";\nimport { addUser } from \"../utils/db\";\nimport firebase from \"../firebase/firebase\";\n\ninterface Auth {\n  uid: string;\n  email: string | null;\n  name: string | null;\n  photoUrl: string | null;\n  token: string | null;\n}\n\ninterface AuthContext {\n  auth: Auth | null;\n  loading: boolean;\n  siginWithGoogle: () => Promise<void>;\n  signOut: () => Promise<void>;\n}\n\nconst authContext: Context<AuthContext> = createContext<AuthContext>({\n  auth: null,\n  loading: true,\n  siginWithGoogle: async () => {},\n  signOut: async () => {},\n});\n\nconst formatAuthState = (user: firebase.User): Auth => ({\n  uid: user.uid,\n  email: user.email,\n  name: user.displayName,\n  photoUrl: user.photoURL,\n  token: null,\n});\n\nfunction useProvideAuth() {\n  const [auth, setAuth] = useState<Auth | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  const handleAuthChange = async (authState: firebase.User | null) => {\n    if (!authState) {\n      setLoading(false);\n      return;\n    }\n    const formattedAuth = formatAuthState(authState);\n    formattedAuth.token = await authState.getIdToken();\n    setAuth(formattedAuth);\n    setLoading(false);\n  };\n\n  const signedIn = async (\n    response: firebase.auth.UserCredential,\n    provider: String = \"google\"\n  ) => {\n    if (!response.user) {\n      throw new Error(\"No User\");\n    }\n    const authUser = formatAuthState(response.user);\n    await addUser({ ...authUser, provider });\n  };\n\n  const clear = () => {\n    setAuth(null);\n    setLoading(true);\n  };\n\n  const siginWithGoogle = async () => {\n    setLoading(true);\n    return firebase\n      .auth()\n      .signInWithPopup(new firebase.auth.GoogleAuthProvider())\n      .then(signedIn);\n  };\n  const signOut = async () => {\n    return firebase.auth().signOut().then(clear);\n  };\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(handleAuthChange);\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    auth,\n    loading,\n    siginWithGoogle,\n    signOut,\n  };\n}\n\nexport function AuthProvider({ children }: any) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\nexport const useAuth = () => useContext(authContext);\n"]},"metadata":{},"sourceType":"module"}