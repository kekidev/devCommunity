{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/keki/dev/websites/web/src/pages/blog/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button } from \"@chakra-ui/button\";\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { Image } from \"@chakra-ui/image\";\nimport { Badge, Box, Flex, SimpleGrid, Spacer, Stack, Text } from \"@chakra-ui/layout\";\nimport React from \"react\";\nimport Navbar from \"../../components/Navbar\";\nimport Head from \"next/head\";\nimport { useRouter } from \"next/router\";\n\nfunction blog(props) {\n  _s();\n\n  var _this2 = this;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var bgColor = {\n    light: \"gray.200\",\n    dark: \"gray.700\"\n  };\n  var textColor = {\n    light: \"gray.500\",\n    dark: \"gray.100\"\n  };\n  var badgeColor = {\n    light: \"purple\",\n    dark: \"teal\"\n  };\n  var variant = {\n    light: \"outline\",\n    dark: null\n  };\n  var router = useRouter();\n  var post = JSON.parse(props.post);\n\n  function PostGen(data) {\n    var _this = this;\n\n    return /*#__PURE__*/_jsxDEV(Box // width=\"300px\"\n    // height=\"380px\"\n    , {\n      maxHeight: \"400px\",\n      rounded: \"20px\",\n      overflow: \"hidden\",\n      boxShadow: \"sm\",\n      bg: bgColor[colorMode],\n      children: [/*#__PURE__*/_jsxDEV(Image, {\n        h: \"44\",\n        w: \"3xl\",\n        src: data.thumbnail,\n        alt: \"Image is not avaliable\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        p: 5,\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          align: \"baseline\",\n          children: data.category.map(function (val) {\n            return /*#__PURE__*/_jsxDEV(Badge, {\n              rounded: \"full\",\n              variant: variant[colorMode],\n              colorScheme: badgeColor[colorMode],\n              children: val.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"h2\",\n          fontWeight: \"semibold\",\n          fontSize: \"xl\",\n          my: 2,\n          children: data.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          isTruncated: true,\n          fontWeight: \"light\",\n          fontSize: \"md\",\n          color: \"gray.500\",\n          children: data.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontWeight: \"semibold\",\n          fontSize: \"lg\",\n          color: textColor[colorMode],\n          children: [\"by \", data.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          textAlign: \"center\",\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: function onClick() {\n              return router.push(\"/blog/\".concat(data.id));\n            },\n            children: \"See more\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, data.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Blog - Untitled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      minChildWidth: \"120px\",\n      columns: 2,\n      spacing: 10,\n      children: post.length > 0 && /*#__PURE__*/_jsxDEV(SimpleGrid, {\n        minChildWidth: \"400px\",\n        children: post.map(function (singePost) {\n          return /*#__PURE__*/_jsxDEV(Box, {\n            textAlign: \"start\",\n            m: 2,\n            children: PostGen(singePost)\n          }, singePost.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, _this2);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(blog, \"jVRnPhorGIGKAdQNabATntCDVO8=\", false, function () {\n  return [useColorMode, useRouter];\n});\n\nexport var __N_SSP = true;\nexport default blog;","map":{"version":3,"sources":["/Users/keki/dev/websites/web/src/pages/blog/index.tsx"],"names":["Button","useColorMode","Image","Badge","Box","Flex","SimpleGrid","Spacer","Stack","Text","React","Navbar","Head","useRouter","blog","props","colorMode","bgColor","light","dark","textColor","badgeColor","variant","router","post","JSON","parse","PostGen","data","thumbnail","category","map","val","toUpperCase","title","content","author","push","id","length","singePost"],"mappings":"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","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { StarIcon } from \"@chakra-ui/icons\";\nimport { Image } from \"@chakra-ui/image\";\nimport {\n  Badge,\n  Box,\n  Center,\n  Divider,\n  Flex,\n  Grid,\n  GridItem,\n  Heading,\n  HStack,\n  SimpleGrid,\n  Spacer,\n  Stack,\n  Text,\n} from \"@chakra-ui/layout\";\nimport { motion } from \"framer-motion\";\nimport React, { useState } from \"react\";\nimport Navbar from \"../../components/Navbar\";\nimport Head from \"next/head\";\nimport { useRouter } from \"next/router\";\nimport { NextPageContext } from \"next\";\nimport { getAllPosts, getPost } from \"../../utils/db\";\n\nfunction blog(props) {\n  const { colorMode } = useColorMode();\n  const bgColor = { light: \"gray.200\", dark: \"gray.700\" };\n  const textColor = { light: \"gray.500\", dark: \"gray.100\" };\n  const badgeColor = { light: \"purple\", dark: \"teal\" };\n  const variant = { light: \"outline\", dark: null };\n  const router = useRouter();\n  const post = JSON.parse(props.post);\n\n  function PostGen(data) {\n    return (\n      <Box\n        // width=\"300px\"\n        // height=\"380px\"\n        maxHeight=\"400px\"\n        rounded=\"20px\"\n        overflow=\"hidden\"\n        boxShadow=\"sm\"\n        bg={bgColor[colorMode]}\n        key={data.id}\n      >\n        <Image\n          h=\"44\"\n          w=\"3xl\"\n          src={data.thumbnail}\n          alt=\"Image is not avaliable\"\n        />\n        <Box p={5}>\n          <Stack direction=\"row\" align=\"baseline\">\n            {data.category.map((val) => (\n              <Badge\n                rounded=\"full\"\n                variant={variant[colorMode]}\n                colorScheme={badgeColor[colorMode]}\n              >\n                {val.toUpperCase()}\n              </Badge>\n            ))}\n          </Stack>\n          <Text as=\"h2\" fontWeight=\"semibold\" fontSize=\"xl\" my={2}>\n            {data.title}\n          </Text>\n          <Text isTruncated fontWeight=\"light\" fontSize=\"md\" color=\"gray.500\">\n            {data.content}\n          </Text>\n          <Text\n            fontWeight=\"semibold\"\n            fontSize=\"lg\"\n            color={textColor[colorMode]}\n          >\n            by {data.author}\n          </Text>\n          <Box textAlign=\"center\" mt={4}>\n            <Button onClick={() => router.push(`/blog/${data.id}`)}>\n              See more\n            </Button>\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Blog - Untitled</title>\n      </Head>\n      <Flex>\n        <Spacer />\n        <Navbar />\n      </Flex>\n\n      <SimpleGrid minChildWidth=\"120px\" columns={2} spacing={10}>\n        {post.length > 0 && (\n          <SimpleGrid minChildWidth=\"400px\">\n            {post.map((singePost) => (\n              <Box key={singePost.id} textAlign=\"start\" m={2}>\n                {PostGen(singePost)}\n              </Box>\n            ))}\n          </SimpleGrid>\n        )}\n      </SimpleGrid>\n    </>\n  );\n}\n\nexport async function getServerSideProps(context: NextPageContext) {\n  const post = await getAllPosts();\n  const data = post.map((singlePost: any) => {\n    return {\n      ...singlePost,\n    };\n  });\n  return {\n    props: {\n      post: JSON.stringify(data),\n    },\n  };\n}\n\nexport default blog;\n"]},"metadata":{},"sourceType":"module"}