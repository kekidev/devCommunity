{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/keki/dev/websites/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/keki/dev/websites/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/keki/dev/websites/web/pages/blog/[id].tsx\",\n    _s = $RefreshSig$();\n\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, useState } from \"react\";\nimport Navbar from \"../../components/Navbar\";\nimport firebase from \"../../firebase/firebase\";\n\nfunction Post() {\n  _s();\n\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useState = useState(null),\n      doc = _useState[0],\n      setDoc = _useState[1];\n\n  var db = firebase.firestore();\n  var postsRef = db.collection(\"articles\").doc(id);\n  useEffect(function () {\n    function getDoc() {\n      return _getDoc.apply(this, arguments);\n    }\n\n    function _getDoc() {\n      _getDoc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return postsRef.get();\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _getDoc.apply(this, arguments);\n    }\n\n    setDoc(getDoc());\n  }, []);\n\n  if (!doc.exists) {\n    console.log(\"dosen't exists\");\n  } else {\n    console.log(doc.data());\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), id]\n  }, void 0, true);\n}\n\n_s(Post, \"KjhsY8BVA+sCXpifoRJ3Zurd8fY=\", false, function () {\n  return [useRouter];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/keki/dev/websites/web/pages/blog/[id].tsx"],"names":["useRouter","React","useEffect","useState","Navbar","firebase","Post","router","id","query","doc","setDoc","db","firestore","postsRef","collection","getDoc","get","exists","console","log","data"],"mappings":";;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,QAAP,MAAqB,yBAArB;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACd,MAAMC,MAAM,GAAGP,SAAS,EAAxB;AADc,MAENQ,EAFM,GAECD,MAAM,CAACE,KAFR,CAEND,EAFM;;AAAA,kBAGQL,QAAQ,CAAC,IAAD,CAHhB;AAAA,MAGPO,GAHO;AAAA,MAGFC,MAHE;;AAId,MAAMC,EAAE,GAAGP,QAAQ,CAACQ,SAAT,EAAX;AACA,MAAMC,QAAQ,GAAGF,EAAE,CAACG,UAAH,CAAc,UAAd,EAA0BL,GAA1B,CAA8BF,EAA9B,CAAjB;AAEAN,EAAAA,SAAS,CAAC,YAAM;AAAA,aACCc,MADD;AAAA;AAAA;;AAAA;AAAA,yEACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACeF,QAAQ,CAACG,GAAT,EADf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADc;AAAA;AAAA;;AAIdN,IAAAA,MAAM,CAACK,MAAM,EAAP,CAAN;AACD,GALQ,EAKN,EALM,CAAT;;AAOA,MAAI,CAACN,GAAG,CAACQ,MAAT,EAAiB;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,GAFD,MAEO;AACLD,IAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACW,IAAJ,EAAZ;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGb,EAFH;AAAA,kBADF;AAMD;;GA1BQF,I;UACQN,S;;;KADRM,I;AA4BT,eAAeA,IAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport React, { useEffect, useState } from \"react\";\nimport Navbar from \"../../components/Navbar\";\nimport firebase from \"../../firebase/firebase\";\n\nfunction Post() {\n  const router = useRouter();\n  const { id } = router.query;\n  const [doc, setDoc] = useState(null);\n  const db = firebase.firestore();\n  const postsRef = db.collection(\"articles\").doc(id);\n\n  useEffect(() => {\n    async function getDoc() {\n      return await postsRef.get();\n    }\n    setDoc(getDoc());\n  }, []);\n\n  if (!doc.exists) {\n    console.log(\"dosen't exists\");\n  } else {\n    console.log(doc.data());\n  }\n\n  return (\n    <>\n      <Navbar />\n      {id}\n    </>\n  );\n}\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}