{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport firebase from \"../firebase/firebase\";\nexport const addUser = async authUser => {\n  const resp = await firebase.firestore().collection(\"users\").doc(authUser.uid).set(_objectSpread({}, authUser), {\n    merge: true\n  });\n  return resp;\n};\nexport const addQuiz = async quizData => {\n  let response = await firebase.firestore().collection(\"quiz\").add(quizData);\n  return response;\n};\nexport const getAllQuiz = async () => {\n  const snapshot = await firebase.firestore().collection(\"quiz\").get();\n  const quiz = snapshot.docs.map(doc => _objectSpread({\n    id: doc.id\n  }, doc.data()));\n  return quiz;\n};\nexport const getAllUsers = async () => {\n  const snapshot = await firebase.firestore().collection(\"users\").get();\n  const users = snapshot.docs.map(doc => _objectSpread({\n    id: doc.id\n  }, doc.data()));\n  return users;\n};\nexport const getSingleQuiz = async quizId => {\n  const snapshot = await firebase.firestore().collection(\"quiz\").doc(String(quizId)).get();\n  const quizData = snapshot.exists ? JSON.stringify(snapshot.data()) : null;\n  return quizData;\n};\nexport const addAnswer = async data => {\n  const response = await firebase.firestore().collection(\"answer\").add(data);\n  return response;\n};\nexport const getAnswer = async answerId => {\n  const answerSnapshot = await firebase.firestore().collection(\"answer\").doc(String(answerId)).get();\n  let answerData = answerSnapshot.exists ? JSON.stringify(answerSnapshot.data()) : null;\n  return answerData;\n};","map":{"version":3,"sources":["/Users/keki/dev/websites/web/utils/db.ts"],"names":["firebase","addUser","authUser","resp","firestore","collection","doc","uid","set","merge","addQuiz","quizData","response","add","getAllQuiz","snapshot","get","quiz","docs","map","id","data","getAllUsers","users","getSingleQuiz","quizId","String","exists","JSON","stringify","addAnswer","getAnswer","answerId","answerSnapshot","answerData"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,sBAArB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAOC,QAAP,IAAyB;AAC9C,QAAMC,IAAI,GAAG,MAAMH,QAAQ,CACxBI,SADgB,GAEhBC,UAFgB,CAEL,OAFK,EAGhBC,GAHgB,CAGZJ,QAAQ,CAACK,GAHG,EAIhBC,GAJgB,mBAIPN,QAJO,GAIK;AAAEO,IAAAA,KAAK,EAAE;AAAT,GAJL,CAAnB;AAKA,SAAON,IAAP;AACD,CAPM;AASP,OAAO,MAAMO,OAAO,GAAG,MAAOC,QAAP,IAAoB;AACzC,MAAIC,QAAQ,GAAG,MAAMZ,QAAQ,CAACI,SAAT,GAAqBC,UAArB,CAAgC,MAAhC,EAAwCQ,GAAxC,CAA4CF,QAA5C,CAArB;AACA,SAAOC,QAAP;AACD,CAHM;AAKP,OAAO,MAAME,UAAU,GAAG,YAAY;AACpC,QAAMC,QAAQ,GAAG,MAAMf,QAAQ,CAACI,SAAT,GAAqBC,UAArB,CAAgC,MAAhC,EAAwCW,GAAxC,EAAvB;AACA,QAAMC,IAAI,GAAGF,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAmBb,GAAD;AAAYc,IAAAA,EAAE,EAAEd,GAAG,CAACc;AAApB,KAA2Bd,GAAG,CAACe,IAAJ,EAA3B,CAAlB,CAAb;AACA,SAAOJ,IAAP;AACD,CAJM;AAMP,OAAO,MAAMK,WAAW,GAAG,YAAY;AACrC,QAAMP,QAAQ,GAAG,MAAMf,QAAQ,CAACI,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCW,GAAzC,EAAvB;AACA,QAAMO,KAAK,GAAGR,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAmBb,GAAD;AAAYc,IAAAA,EAAE,EAAEd,GAAG,CAACc;AAApB,KAA2Bd,GAAG,CAACe,IAAJ,EAA3B,CAAlB,CAAd;AACA,SAAOE,KAAP;AACD,CAJM;AAMP,OAAO,MAAMC,aAAa,GAAG,MAAOC,MAAP,IAAkB;AAC7C,QAAMV,QAAQ,GAAG,MAAMf,QAAQ,CAC5BI,SADoB,GAEpBC,UAFoB,CAET,MAFS,EAGpBC,GAHoB,CAGhBoB,MAAM,CAACD,MAAD,CAHU,EAIpBT,GAJoB,EAAvB;AAKA,QAAML,QAAQ,GAAGI,QAAQ,CAACY,MAAT,GAAkBC,IAAI,CAACC,SAAL,CAAed,QAAQ,CAACM,IAAT,EAAf,CAAlB,GAAoD,IAArE;AACA,SAAOV,QAAP;AACD,CARM;AAUP,OAAO,MAAMmB,SAAS,GAAG,MAAOT,IAAP,IAAgB;AACvC,QAAMT,QAAQ,GAAG,MAAMZ,QAAQ,CAACI,SAAT,GAAqBC,UAArB,CAAgC,QAAhC,EAA0CQ,GAA1C,CAA8CQ,IAA9C,CAAvB;AACA,SAAOT,QAAP;AACD,CAHM;AAKP,OAAO,MAAMmB,SAAS,GAAG,MAAOC,QAAP,IAAoB;AAC3C,QAAMC,cAAc,GAAG,MAAMjC,QAAQ,CAClCI,SAD0B,GAE1BC,UAF0B,CAEf,QAFe,EAG1BC,GAH0B,CAGtBoB,MAAM,CAACM,QAAD,CAHgB,EAI1BhB,GAJ0B,EAA7B;AAKA,MAAIkB,UAAU,GAAGD,cAAc,CAACN,MAAf,GACbC,IAAI,CAACC,SAAL,CAAeI,cAAc,CAACZ,IAAf,EAAf,CADa,GAEb,IAFJ;AAGA,SAAOa,UAAP;AACD,CAVM","sourcesContent":["import firebase from \"../firebase/firebase\";\n\nexport const addUser = async (authUser: any) => {\n  const resp = await firebase\n    .firestore()\n    .collection(\"users\")\n    .doc(authUser.uid as string)\n    .set({ ...authUser }, { merge: true });\n  return resp;\n};\n\nexport const addQuiz = async (quizData) => {\n  let response = await firebase.firestore().collection(\"quiz\").add(quizData);\n  return response;\n};\n\nexport const getAllQuiz = async () => {\n  const snapshot = await firebase.firestore().collection(\"quiz\").get();\n  const quiz = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n  return quiz;\n};\n\nexport const getAllUsers = async () => {\n  const snapshot = await firebase.firestore().collection(\"users\").get();\n  const users = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n  return users;\n};\n\nexport const getSingleQuiz = async (quizId) => {\n  const snapshot = await firebase\n    .firestore()\n    .collection(\"quiz\")\n    .doc(String(quizId))\n    .get();\n  const quizData = snapshot.exists ? JSON.stringify(snapshot.data()) : null;\n  return quizData;\n};\n\nexport const addAnswer = async (data) => {\n  const response = await firebase.firestore().collection(\"answer\").add(data);\n  return response;\n};\n\nexport const getAnswer = async (answerId) => {\n  const answerSnapshot = await firebase\n    .firestore()\n    .collection(\"answer\")\n    .doc(String(answerId))\n    .get();\n  let answerData = answerSnapshot.exists\n    ? JSON.stringify(answerSnapshot.data())\n    : null;\n  return answerData;\n};\n"]},"metadata":{},"sourceType":"module"}